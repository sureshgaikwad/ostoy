# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# üíÅ The OpenShift Starter workflow will:
# - Checkout your repository ..
# - Perform a container image build
# - Push the built image to the GitHub Container Registry (GHCR)
# - Log in to your OpenShift cluster
# - Create an OpenShift app from the image and expose it to the internet

# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Have access to an OpenShift cluster. Refer to https://www.openshift.com/try
# 2. Create the OPENSHIFT_SERVER and OPENSHIFT_TOKEN repository secrets. Refer to:
#   - https://github.com/redhat-actions/oc-login#readme
#   - https://docs.github.com/en/actions/reference/encrypted-secrets
#   - https://cli.github.com/manual/gh_secret_set
# 3. (Optional) Edit the top-level 'env' section as marked with 'üñäÔ∏è' if the defaults are not suitable for your project.
# 4. (Optional) Edit the build-image step to build your project.
#    The default build type is by using a Dockerfile at the root of the repository,
#    but can be replaced with a different file, a source-to-image build, or a step-by-step buildah build.
# 5. Commit and push the workflow file to your default branch to trigger a workflow run.

# üëã Visit our GitHub organization at https://github.com/redhat-actions/ to see our actions and provide feedback.

name: OpenShift Everywhere

env:
  # üñäÔ∏è EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  ROSA_SERVER: ${{ secrets.ROSA_SERVER }}
  ROSA_TOKEN: ${{ secrets.ROSA_TOKEN }}
  ARO_SERVER: ${{ secrets.ARO_SERVER }}
  ARO_TOKEN: ${{ secrets.ARO_TOKEN }}
  GCP_SERVER: ${{ secrets.GCP_SERVER }}
  GCP_TOKEN: ${{ secrets.GCP_TOKEN }}
  ROSA_SERVER_PROD: ${{ secrets.ROSA_SERVER_PROD }}
  ROSA_TOKEN_PROD: ${{ secrets.ROSA_TOKEN_PROD }}
  ARO_LIVE: ${{ vars.ARO_LIVE }}
  GCP_LIVE: ${{ vars.GCP_LIVE }}
  ROSA_LIVE: ${{ vars.ROSA_LIVE }}
  # üñäÔ∏è EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: ""
  #QUAY_FEND_LINK: ${{ secrets.QUAY_FEND_LINK }}
  #QUAY_BEND_LINK: ${{ secrets.QUAY_BEND_LINK }}

  # üñäÔ∏è EDIT to set a name for your OpenShift app, or a default one will be generated below.
  APP_NAME: "ostoy-microservice"

  # üñäÔ∏è EDIT with the port your application should be accessible on.
  # If the container image exposes *exactly one* port, this can be left blank.
  # Refer to the 'port' input of https://github.com/redhat-actions/oc-new-app
  APP_PORT: ""

  # üñäÔ∏è EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: "quay.io"
  IMAGE_REGISTRY_USER: "sureshgaikwad+sgaikwad"
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.QUAY_TOKEN }}

  # üñäÔ∏è EDIT to specify custom tags for the container image, or default tags will be generated below.
  IMAGE_TAGS: ""

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
  push:
    # Edit to the branch(es) you want to build and deploy on each push.
    branches: [ "develop" ]

jobs:
  # üñäÔ∏è EDIT if you want to run vulnerability check on your project before deploying
  # the application. Please uncomment the below CRDA scan job and configure to run it in
  # your workflow. For details about CRDA action visit https://github.com/redhat-actions/crda/blob/main/README.md
  #
  # TODO: Make sure to add 'CRDA Scan' starter workflow from the 'Actions' tab.
  # For guide on adding new starter workflow visit https://docs.github.com/en/github-ae@latest/actions/using-workflows/using-starter-workflows

  #crda-scan:
  # uses: ./.github/workflows/crda.yml
  #  secrets:
  #    CRDA_KEY: ${{ secrets.CRDA_KEY }}
      # SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}       # Either use SNYK_TOKEN or CRDA_KEY

  image-ci-cd:
    name: Build and push to quay
    runs-on: ubuntu-20.04
    environment: build

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      MSVC_IMAGE: ${{ steps.push-image.outputs.registry-path }}
      FEND_IMAGE: ${{ steps.push-image-frontend.outputs.registry-path }}
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    
    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/buildah-build#readme
    - name: Build from Dockerfile
      id: build_image_msvc
      uses: redhat-actions/s2i-build@v2
      with:
        path_context: 'microservice'
        builder_image: 'registry.access.redhat.com/ubi8/nodejs-16'
        image: 'sureshgaikwad/uat-vote-ui'
    
        #Setup S2i and Build Frontend container image
    - name: Steup and Build
      id: build_image_frontend
      uses: redhat-actions/s2i-build@v2
      with:
        path_context: './'
        builder_image: 'registry.access.redhat.com/ubi8/nodejs-16'
        image: 'sureshgaikwad/prod-vote-ui'
    

    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to Quay
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build_image_msvc.outputs.image }}
        tags: ${{ steps.build_image_msvc.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    - name: Push Frontend image to Quay
      id: push-image-frontend
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build_image_frontend.outputs.image }}
        tags: ${{ steps.build_image_frontend.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

    # The path the image was pushed to is now stored in ${{ steps.push-image.outputs.registry-path }}

    
    
  rosa-deploy:
    name: ROSA Deployment - Dev
    if: ${{ vars.ROSA_LIVE == 'true' }}
    runs-on: ubuntu-20.04
    environment: ROSA_DEV 
    needs: image-ci-cd

    steps:
    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    # https://github.com/redhat-actions/oc-login#readme
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.ROSA_SERVER }}
        openshift_token: ${{ env.ROSA_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    # This step should create a deployment, service, and route to run your app and expose it to the internet.
    # https://github.com/redhat-actions/oc-new-app#readme
    - name: Create and expose app
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ needs.image-ci-cd.outputs.MSVC_IMAGE }}
        #image: ${{ env.QUAY_BEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}

    - name: Create and expose app
      id: deploy-and-expose-frontend
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: 'ostoy'
        image: ${{ needs.image-ci-cd.outputs.FEND_IMAGE }}
        #image: ${{ env.QUAY_FEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        build_env: 'MICROSERVICE_NAME=OSTOY_MICROSERVICE'

    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
        
    - name: Print application FRONTEND URL
      env:
        ROUTE: ${{ steps.deploy-and-expose-frontend.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose-frontend.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
        
    - name: Set ROSA environment variable
      run: |
        oc set env deployment/ostoy ROSA=true
        oc set env deployment/ostoy ORANGE=true
        oc set env deployment/ostoy ORANGEB=true

  aro-ci-cd:
    name: ARO deployment
    if: ${{ vars.ARO_LIVE == 'true' }}
    runs-on: ubuntu-20.04
    environment: ARO_PROD
    needs: [rosa2-ci-cd, rosa-deploy, image-ci-cd]
    # needs: [rosa-deploy, image-ci-cd]

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
    
    steps:
    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4
    
    - env:
          OUTPUT1: ${{ needs.aws-ci-cd.outputs.MSVC_IMAGE }}
          OUTPUT2: ${{ needs.aws-ci-cd.outputs.FEND_IMAGE }}
      run: echo "$OUTPUT1 $OUTPUT2"

    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.ARO_SERVER }}
        openshift_token: ${{ env.ARO_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
    
    - name: Create and expose app
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ needs.image-ci-cd.outputs.MSVC_IMAGE }}
        #image: ${{ env.QUAY_BEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}

    - name: Create and expose app
      id: deploy-and-expose-frontend
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: 'ostoy'
        image: ${{ needs.image-ci-cd.outputs.FEND_IMAGE }}
        #image: ${{ env.QUAY_FEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        build_env: 'MICROSERVICE_NAME=OSTOY_MICROSERVICE'
    
    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
    
    - name: Print application FRONTEND URL
      env:
        ROUTE: ${{ steps.deploy-and-expose-frontend.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose-frontend.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
      
    - name: Set ARO environment variable
      run: |
        oc set env deployment/ostoy ARO=true
        oc set env deployment/ostoy BLUE=true
        oc set env deployment/ostoy BLUEB=true

  gcp-ci-cd:
    name: OSD-GCP deployment
    if: ${{ vars.GCP_LIVE == 'true' }}
    runs-on: ubuntu-20.04
    environment: GCP_PROD
    needs: [rosa2-ci-cd, rosa-deploy, image-ci-cd]
    # needs: [rosa-ci-cd, app-ci-cd]
    
    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
    
    steps:
    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4
    
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.GCP_SERVER }}
        openshift_token: ${{ env.GCP_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
    
    - name: Create and expose app - backend
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ needs.image-ci-cd.outputs.MSVC_IMAGE }}
        #image: ${{ env.QUAY_BEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}

    - name: Create and expose app - frontend
      id: deploy-and-expose-frontend
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: 'ostoy'
        image: ${{ needs.image-ci-cd.outputs.FEND_IMAGE }}
        #image: ${{ env.QUAY_FEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        build_env: 'MICROSERVICE_NAME=OSTOY_MICROSERVICE'
    
    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
    
    - name: Print application FRONTEND URL
      env:
        ROUTE: ${{ steps.deploy-and-expose-frontend.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose-frontend.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""  
        
    - name: Set OSD environment variable
      run: |
        oc set env deployment/ostoy OSD=true
        oc set env deployment/ostoy GREEN=true
        oc set env deployment/ostoy GREENB=true

  rosa2-ci-cd:
    name: ROSA Deployment - Prod
    if: ${{ vars.ROSA_PROD == 'true' }}
    runs-on: ubuntu-20.04
    environment: ROSA_PROD
    needs: [rosa-deploy, image-ci-cd]
    # needs: [rosa-ci-cd, app-ci-cd]
    
    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
    
    steps:
    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4
    
    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.ROSA_SERVER_PROD }}
        openshift_token: ${{ env.ROSA_TOKEN_PROD }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
    
    - name: Create and expose app - backend
      id: deploy-and-expose
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}
        image: ${{ needs.image-ci-cd.outputs.MSVC_IMAGE }}
        #image: ${{ env.QUAY_BEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}

    - name: Create and expose app - frontend
      id: deploy-and-expose-frontend
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: 'ostoy'
        image: ${{ needs.image-ci-cd.outputs.FEND_IMAGE }}
        #image: ${{ env.QUAY_FEND_LINK }}
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: ${{ env.APP_PORT }}
        build_env: 'MICROSERVICE_NAME=OSTOY_MICROSERVICE'
    
    - name: Print application URL
      env:
        ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
    
    - name: Print application FRONTEND URL
      env:
        ROUTE: ${{ steps.deploy-and-expose-frontend.outputs.route }}
        SELECTOR: ${{ steps.deploy-and-expose-frontend.outputs.selector }}
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\"" 
        
    - name: Set ROSA environment variable
      run: |
        oc set env deployment/ostoy ROSA=true
        oc set env deployment/ostoy ORANGE=true
        oc set env deployment/ostoy ORANGEB=true
